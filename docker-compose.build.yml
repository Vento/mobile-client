version: '3'
services:
#
# Infrastructure Services
#
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:alpine
    restart: always
    ports:
        - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]

  elasticsearch:
    build:
      context: ./logging/elasticsearch/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "9200:9200"
        - "9300:9300"
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
  kibana:
    build:
      context: ./logging/kibana/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "5601:5601"
    deploy:
      placement:
        constraints: [node.role == manager]

  logstash:
    build:
      context: ./logging/logstash/
      dockerfile: Dockerfile
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]

#
# Centralized Configuration
#
  config:
    build:
      context: ./config/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "8888:8888"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# Service Discovery - Eureka
#
  registry:
    build:
      context: ./registry/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "8761:8761"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# UAA Service
#
  auth-service:
    build:
      context: ./auth-service/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "3000:3000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - auth-db
      - rabbitmq
#
# UAA Database Service
#
  auth-db:
    image: mongo:latest
    restart: always
    ports:
        - "3001:27017"
    deploy:
      placement:
        constraints: [node.role == manager]
#
# Zuul Gateway / Ribbon load balancer
#
  gateway:
    build:
      context: ./gateway/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "80:9000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# Profile Service
#
  profile-service:
    build:
      context: ./profile-service/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "1000:1000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - profile-db
      - rabbitmq
#
# Profile Database Service
#
  profile-db:
    image: mongo:latest
    restart: always
    ports:
        - "1001:27017"
    deploy:
      placement:
        constraints: [node.role == manager]
#
# Match Service
#
  match-service:
    build:
      context: ./match-service/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "2000:2000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - redis
      - rabbitmq

#
# Hystrix Monitoring
#
  monitoring:
    build: 
      context: ./monitoring/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "8989:8989" 
        - "8080:8080"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - rabbitmq
# Zipkin Tracing
#
  tracing:
    build: 
      context: ./tracing/
      dockerfile: Dockerfile
    restart: always
    ports:
        - "9411:9411" 
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - rabbitmq